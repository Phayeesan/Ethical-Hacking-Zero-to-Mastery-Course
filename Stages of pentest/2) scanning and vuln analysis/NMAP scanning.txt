stage 2) Scanning
a)much deeper info gathering
b)focused on technology

goals of scanning
1)to find open ports
2)to find what software and version is running on a open port

port 80-http
port 443-https
port 22-ssh
port 53-dns
port 25-smtp

TCP
Transmission Control Protocol
three way handshake
1) syn-sends request
2)syn/ack- server returns response
3)ack- clients acknowledges response

Udp
user datagram protocol
used when speed is desireable and doesn't check for error
e.g. servers used for live streaming

Parts to scanning
1)discover how many hosts is available and their ip addresses

tools to discover hosts
a) arp 
b) netdiscover -- sudo netdiscover
netstat -nr = to discover router ip


tools for scanning
1)nmap== nmap {ip address}- scan ip to discover open ports on a system
nmap man== nmap manual

nmap scan types
syn scan == -sS (requires root)
tcp connect scan == -sT(does not require root and makes more noise)
udp scan == -sU 
-sF == fin scan

2)discovering OS and software version
for nmap os scan to work, a target must have one port open and one closed
sudo namp -O {IP ADDR}
-O = to discover OS.
hop = distance from scanner

3)detecting service version = -sV requires root


****next step-- search for known vulnerabilities for the versions found

--version-intensity- its 7 by default but can be from 0-9, 9 gives
99% correct version but take longer time


-A== one of more aggressive options, don't try on a target without
permission --- enables -sV, -O and nmap scripts


3)filtering ports range
-p =use to specify a specific port 1-65535 more useful
-F =scans first 100 port most used


4)output scan
-oN == print on terminal and save
-oA == save in all formats


Firewalls/IDS
Usig decoys to bypass firewall


fragmented packets
-f = uses tiny fragments ip packet to split tcp header to make it hard 
to detect. can be used twice. be careful when using on actual target

--mtu == increase fragment size, must be multiple of 8


using Decoy
-D == 
RND == n, random number of decoy ip. useful for targets outside your network
-D {random number of same local ip} == useful for targets in your network



security evasion with nmap options
-S == spoof your ip but you won't get result back. must specify -Pn
-Pn == assume all host are only
-e == to specify network interface
-g {rnd port} == specify source port, sometimes bypass firewall

timing template{nmap man}
-T0-paranoid
-T1-sneaky... takes a lot of time to finish

nmap -T4 -A -F ip_addr -v == scan with timing tmp 4, aggressive scan, scan top 100 ports, verbose output


nmap -sn ip_addr_range === ping sweep to check live ip

-sI == https://nmap.org/book/idlescan.html

always run -sS with sudo**

SYN scans can also be made to work by giving Nmap the CAP_NET_RAW, CAP_NET_ADMIN and CAP_NET_BIND_SERVICE capabilities; however, this may not allow many of the NSE scripts to run properly.


it's usually good practice to run an Nmap scan with --top-ports <number> enabled. For example, scanning with
nmap -sU --top-ports 20 <target>.
Will scan the top 20 most commonly used UDP ports, resulting in a much more acceptable scan time.


FIN scans (-sF) work in an almost identical fashion; however, instead of sending a completely empty packet, a request is sent with the FIN flag (usually used to gracefully close an active connection). Once again, Nmap expects a RST if the port is closed.


NULL scans (-sN) are when the TCP request is sent with no flags set at all. As per the RFC, the target host should respond with a RST if the port is closed.


It's also worth noting that while RFC 793 mandates that network hosts respond to malformed packets with a RST TCP packet for closed ports, and don't respond at all for open ports; this is not always the case in practice. In particular Microsoft Windows (and a lot of Cisco network devices) are known to respond with a RST to any malformed TCP packet -- regardless of whether the port is actually open or not. This results in all ports showing up as being closed.


if a port is closed, RFC 9293 states that:

"... If the connection does not exist (CLOSED), then a reset is sent in response to any incoming segment except another reset. A SYN segment that does not match an existing connection is rejected by this means."

In other words, if Nmap sends a TCP request with the SYN flag set to a closed port, the target server will respond with a TCP packet with the RST (Reset) flag set. By this response, Nmap can establish that the port is closed.


There are two ways to search for installed scripts. One is by using the /usr/share/nmap/scripts/script.db file. Despite the extension, this isn't actually a database so much as a formatted text file containing filenames and categories for each available script


The second way to search for scripts is quite simply to use the ls command. For example, we could get the same results as in the previous screenshot by using ls -l /usr/share/nmap/scripts/*ftp*


Installing New Scripts

The Nmap website contains a list of scripts, so, what happens if one of these is missing in the scripts directory locally? A standard sudo apt update && sudo apt install nmap should fix this; however, it's also possible to install the scripts manually by downloading the script from Nmap
(sudo wget -O /usr/share/nmap/scripts/<script-name>.nse https://svn.nmap.org/nmap/scripts/<script-name>.nse). 
This must then be followed up with:
nmap --script-updatedb
which updates the script.db file to contain the newly downloaded script.

It's worth noting that you would require the same "updatedb" command if you were to make your own NSE script and add it into Nmap -- a more than manageable task with some basic knowledge of Lua! 


naabu
naabu -l subdomainlist.txt -p --exclude-ports 80,443,8080,22,25 -o results.txt

Vulnerability analysis

